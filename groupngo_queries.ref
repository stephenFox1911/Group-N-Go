/*join a trip*/
	INSERT INTO `Users_Trips`(`UserID`, `TripID`) VALUES(\\currentUserID, \\RequestedJoinID);

/*Add a Trip(and immediately join)*/
Insert INTO `Trips`(`StartLocationID`, `EndLocationID`) 
		VALUES(
			(select ID from Locations where UPPER(Name) like "%/*slocationname*/%" limit 1), 
			(select ID from Locations where UPPER(Name) like "%/*elocationname*/%" limit 1)
            );
	INSERT INTO `Users_Trips`(`UserID`, `TripID`) VALUES(/*userID*/, LAST_INSERT_ID());

/*Find Starting points of trips*/
	SELECT Locations.Name, Locations.Lat, Locations.Lng From Trips 
		Join Locations On Locations.ID=Trips.StartLocationID
		Where Active=1;
	
/*Find Closest Starting Point*/
	Select locations.*, (POW(69.1 * (locations.slat - 33.772474), 2) + POW(69.1 * (-84.394085 - slng) * COS(slat / 57.3), 2)) AS distance
	From
	(Select trips.TripID as tripid, sl.Name as sname, sl.Lat as slat, sl.Lng as slng, el.Name as ename, el.Lat as elat, el.Lng as elng
		From (Select TripID From Users_Trips Where Active =1) as trips
			Join Trips t on trips.TripID = t.ID
			Join Locations sl On sl.ID= t.StartLocationID
			Join Locations el On el.ID = t.EndLocationID
		) as locations
	Order by distance;


/*Get all trips for a user*/
	Select t.ID, sl.Name, el.Name
		From Users_Trips
			Join Trips t On Users_Trips.TripID= t.ID
			Join Locations sl ON t.StartLocationID = sl.ID
			Join Locations el ON t.EndLocationID = el.ID
		Where Users_Trips.UserID=/*currentUserID*/
		AND t.Active=1
	
